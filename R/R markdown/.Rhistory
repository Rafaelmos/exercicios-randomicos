for (i in seq(1, 3, by = 1)) {
url <- paste0("https://www.researchgate.net/search/publication?q=Linguagem%2BR&page=",i)
pagina <- read_html(url)
titulo <- pagina %>%
html_elements(css = ".nova-legacy-v-publication-item__title") %>%
html_text2()
titulos <- append(titulos, titulo)
autor <- pagina %>%
html_elements(css = ".nova-legacy-v-publication-item__person-list") %>%
html_text2()
autores <- append(autores, autor)
publicacao <- pagina %>%
html_elements(css = ".nova-legacy-v-publication-item__meta-data-item:nth-child(1) span") %>%
html_text2()
publicacoes <- append(publicacoes, publicacao)
}
df <- data.frame(
titulos,
autores,
publicacoes
)
View(df)
install.packages("rmarkdown")
load("~/.RData")
install.packages("plotly")
a <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=0")
View(a)
a <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=1")
View(a)
dados <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=1")
View(dados)
dados <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=1")
# Filtrar os conteúdos com apenas um país de origem
dados_filtrados <- dados %>%
filter(!is.na(country)) %>%
filter(!grepl(",", country)) # Filtrar apenas países únicos
library(dplyr)
library(plotly)
dados <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=1")
# Filtrar os conteúdos com apenas um país de origem
dados_filtrados <- dados %>%
filter(!is.na(country)) %>%
filter(!grepl(",", country)) # Filtrar apenas países únicos
conteudos_por_pais <- dados_filtrados %>%
count(country) %>%
arrange(desc(n)) %>%
slice(1:10) # Selecionar os 10 países com mais conteúdo
View(dados_filtrados)
View(a)
View(a)
summary(conteudos_por_pais)
# Filtrar os conteúdos com apenas um país de origem
dados_filtrados <- dados %>%
filter(!is.na(country) & country != "") %>%
filter(!grepl(",", country)) # Filtrar apenas países únicos
library(dplyr)
library(plotly)
dados <-read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=1&dl=1")
# Filtrar os conteúdos com apenas um país de origem
dados_filtrados <- dados %>%
filter(!is.na(country) & country != "") %>%
filter(!grepl(",", country)) # Filtrar apenas países únicos
conteudos_por_pais <- dados_filtrados %>%
count(country) %>%
arrange(desc(n)) %>%
slice(1:10) # Selecionar os 10 países com mais conteúdo
View(conteudos_por_pais)
# Extrair a década de lançamento
dados$decada <- as.numeric(substr(dados$release_year, 1, 3)) * 10
library(dplyr)
library(plotly)
# Carregar os dados
dados <- read.csv("netflix_titles.csv")
library(dplyr)
library(plotly)
# Carregar os dados
dados <- read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=2&dl=1")
# Extrair a década de lançamento
dados$decada <- as.numeric(substr(dados$release_year, 1, 3)) * 10
View(dados)
library(dplyr)
library(plotly)
# Carregar os dados
dados <- read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=2&dl=1")
# Extrair a década de lançamento
dados$decada <- as.numeric(substr(dados$release_year, 1, 3)) * 10
dados_por_decada <- dados %>%
filter(!is.na(release_year)) %>%
group_by(decada, type) %>%
summarise(contagem = n()) %>%
ungroup()
View(dados_por_decada)
sum(dados_por_decada$contagem)
dados_agrupados <- filmes20002010 %>%
group_by(release_year, primeiro_genero) %>%
summarise(contagem = n()) %>%
filter(primeiro_genero %in% c("Dramas", "Action & Adventure", "Comedies")) %>%
ungroup()
dados_agrupados <- filmes20002010 %>%
group_by(release_year, primeiro_genero) %>%
summarise(contagem = n()) %>%
filter(primeiro_genero %in% c("Dramas", "Action & Adventure", "Comedies")) %>%
ungroup()
library(dplyr)
library(plotly)
# Carregar os dados
dados <- read.csv("https://www.dropbox.com/scl/fi/vjlgt50835d6snk03add2/netflix_titles.csv?authuser=0&rlkey=rzrveurxlom9cjp51nbv4w1gw&e=2&dl=1")
filmes20002010 <- dados %>%
filter(type == "Movie", between(as.numeric(substr(release_year, 1, 4)), 2000, 2010))
filmes20002010$primeiro_genero <- sub(",.*", "", filmes20002010$listed_in)
dados_agrupados <- filmes20002010 %>%
group_by(release_year, primeiro_genero) %>%
summarise(contagem = n()) %>%
filter(primeiro_genero %in% c("Dramas", "Action & Adventure", "Comedies")) %>%
ungroup()
View(dados_agrupados)
View(dados_agrupados)
setwd("C:\Users\rafae\Documents\R\R markdown")
setwd("C:/Users/rafae/Documents/R/R markdown")
# Carregar os dados de cada arquivo CSV
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
# Ajustar a coluna "currentTime" para que o tempo seja contínuo
dados_0.1$currentTime <- as.POSIXct(dados_0.1$currentTime)
dados_0.5$currentTime <- as.POSIXct(dados_0.5$currentTime)
dados_1$currentTime <- as.POSIXct(dados_1$currentTime)
dados_NONE$currentTime <- as.POSIXct(dados_NONE$currentTime)
# Carregar os dados de cada arquivo CSV
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
# Ajustar a coluna "currentTime" para que o tempo seja contínuo
dados_0.1$currentTime <- as.POSIXct(dados_0.1$currentTime)
dados_0.5$currentTime <- as.POSIXct(dados_0.5$currentTime)
dados_1$currentTime <- as.POSIXct(dados_1$currentTime)
dados_NONE$currentTime <- as.POSIXct(dados_NONE$currentTime)
dados_0.1$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados_0.1$usedMemory)) / 1024
dados_0.5$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados_0.5$usedMemory)) / 1024
dados_1$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados_1$usedMemory)) / 1024
dados_NONE$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados_NONE$usedMemory)) / 1024
View(dados_NONE)
View(dados_1)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
View(dados_NONE)
View(dados_1)
View(dados_NONE)
View(dados_1)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
# Ajustar coluna "currentTime" para que o tempo fique contínuo
dados$currentTime <- as.POSIXct(dados$currentTime)
dados$currentTime <- dados$currentTime + difftime(dados$currentTime[1], dados$currentTime[1], units = "hours")
dados$usedMemory_orig <- gsub("[0-9.]", "", dados$usedMemory)
# Ajustar coluna "usedMemory" para megabytes
dados$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_orig == "TB", dados$usedMemory * 1000000,
ifelse(dados$usedMemory_orig == "GB", dados$usedMemory * 1024,
dados$usedMemory))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_NONE)
View(dados_1)
View(dados_0.5)
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
View(dados_0.5)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
# Ajustar coluna "currentTime" para que o tempo fique contínuo
dados$currentTime <- as.POSIXct(dados$currentTime)
dados$currentTime <- dados$currentTime + difftime(dados$currentTime[1], dados$currentTime[1], units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
# Ajustar coluna "usedMemory" para megabytes
dados$usedMemory <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_orig == "TB", dados$usedMemory * 1000000,
ifelse(dados$usedMemory_orig == "GB", dados$usedMemory * 1024,
dados$usedMemory))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
View(dados_0.5)
View(dados_1)
View(dados_0.1)
View(dados_NONE)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- as.POSIXct(dados$currentTime)
dados$currentTime <- dados$currentTime + difftime(dados$currentTime[1], dados$currentTime[1], units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_NONE)
View(dados_0.5)
View(dados_0.1)
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- as.POSIXct(dados$currentTime)
dif_tempo <- difftime(dados$currentTime, dados$currentTime[1], units = "hours")
dados$currentTime <- dados$currentTime + dif_tempo
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
View(dados_1)
View(dados_0.5)
View(dados_0.5)
View(dados_0.5)
View(dados_1)
View(dados_1)
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_0.5)
View(dados_NONE)
View(dados_0.1)
View(dados_0.5)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- as.POSIXct(dados$currentTime)
dif_tempo <- difftime(dados$currentTime, dados$currentTime[1], units = "hours")
dados$currentTime <- dados$currentTime + dif_tempo
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- difftime(dados$currentTime, dados$currentTime[1], units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.5)
View(dados_0.5)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
View(dados_0.5)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- difftime(dados$currentTime[1], dados$currentTime, units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.1)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
View(dados_0.5)
print(difftime(dados_0.5$currentTime, dados_0.5$currentTime[1], units = "hours"))
print(difftime(dados_0.5$currentTime[1], dados_0.5$currentTime[1], units = "hours"))
print(difftime(dados_0.5$currentTime[2], dados_0.5$currentTime[1], units = "hours"))
print(difftime(dados_0.5$currentTime, dados_0.5$currentTime[1], units = "hours"))
dados$currentTime <- difftime(dados$currentTime, reftime, units = "hours")
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
reftime <- dados$currentTime[1]
dados$currentTime <- difftime(dados$currentTime, reftime, units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
print(difftime(dados_0.5$currentTime, dados_0.5$currentTime[1], units = "hours"))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
reftime <- dados$currentTime[1]
dados$currentTime <- difftime(dados$currentTime, reftime, units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.5)
View(dados_1)
View(dados_NONE)
View(dados_0.1)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- as.POSIXct(dados$currentTime)
reftime <- dados$currentTime[1]
dados$currentTime <- difftime(dados$currentTime, reftime, units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.5)
View(dados_0.1)
View(dados_1)
View(dados_NONE)
View(dados_0.5)
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_0.5 <- ajustar_dados(dados_0.5)
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_0.5 <- ajustar_dados(dados_0.5)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- strptime(dados$currentTime, "%Y-%m-%d %H:%M:%S")
dados$currentTime <- difftime(dados$currentTime, reftime, units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.1 <- read.csv("monitoringCloudData_0.1.csv")
dados_0.5 <- read.csv("monitoringCloudData_0.5.csv")
dados_1 <- read.csv("monitoringCloudData_1.csv")
dados_NONE <- read.csv("monitoringCloudData_NONE.csv")
dados_0.1 <- dados_0.1[, c("currentTime", "usedMemory")]
dados_0.5 <- dados_0.5[, c("currentTime", "usedMemory")]
dados_1 <- dados_1[, c("currentTime", "usedMemory")]
dados_NONE <- dados_NONE[, c("currentTime", "usedMemory")]
ajustar_dados <- function(dados) {
dados$currentTime <- strptime(dados$currentTime, "%Y-%m-%d %H:%M:%S")
dados$currentTime <- difftime(dados$currentTime, dados$currentTime[1], units = "hours")
dados$usedMemory_unidade_orig <- gsub("[0-9.]", "", dados$usedMemory)
dados$usedMemory_orig <- as.numeric(gsub("[^0-9.]", "", dados$usedMemory))
dados$usedMemory <- ifelse(dados$usedMemory_unidade_orig == "TB", dados$usedMemory_orig * 1000000,
ifelse(dados$usedMemory_unidade_orig == "GB", dados$usedMemory_orig * 1024,
dados$usedMemory_orig))
return(dados)
}
dados_0.1 <- ajustar_dados(dados_0.1)
dados_0.5 <- ajustar_dados(dados_0.5)
dados_1 <- ajustar_dados(dados_1)
dados_NONE <- ajustar_dados(dados_NONE)
View(dados_0.5)
View(dados_0.1)
View(dados_NONE)
View(dados_1)
View(dados_0.5)
